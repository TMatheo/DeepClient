using System;
using System.Collections;
using DeepClient.Client.Misc;
using DeepClient.Client.Misc.DeepClient.Client.Misc;
using UnityEngine;
using VRC.SDKBase;

namespace DeepClient.Client.Module.Exploits
{
    internal class EarRape
    {
        public static bool Earape = false;
        public static void State(bool s)
        {
            if (s)
            {
                Earape = s;
                Start().Start();
                DeepConsole.Log("E1", "E1 Started.");
            }
            else
            {
                Earape = s;
            }
        }
        public static IEnumerator Start()
        {
            while (Earape)
            {
                byte[] VoiceData = Convert.FromBase64String("AAAAAGfp+Lv2GRkA+MrI08yxTwBkxqwATk9LRU0wTk9LM00wTg==");
                byte[] nulldata = new byte[4];
                byte[] ServerTime = System.BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds());
                Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
                Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
                for (int i = 0; i < 5; i++)
                {
                    if (!Earape)
                        break;
                    PhotonEx.RaiseEvent(1, VoiceData, new RaiseEventOptions_Internal
                    {
                        field_Public_EnumPublicSealedvaDoMeReAdReSlAd13SlUnique_0 = EnumPublicSealedvaDoMeReAdReSlAd13SlUnique.DoNotCache,
                        field_Public_EnumPublicSealedvaOtAlMa4vUnique_0 = EnumPublicSealedvaOtAlMa4vUnique.Others
                    }, default);
                }
                yield return new WaitForSecondsRealtime(0.1f);
            }
            DeepConsole.Log("E1", "Stopped.");
            yield break;
        }
        public static void Teste1()
        {
            byte[] VoiceData = Convert.FromBase64String("");
            byte[] nulldata = new byte[4];
            byte[] ServerTime = System.BitConverter.GetBytes(Networking.GetServerTimeInMilliseconds());
            Buffer.BlockCopy(nulldata, 0, VoiceData, 0, 4);
            Buffer.BlockCopy(ServerTime, 0, VoiceData, 4, 4);
            for (int i = 0; i < 5; i++)
            {
                PhotonEx.RaiseEvent(1, VoiceData, new RaiseEventOptions_Internal
                {
                    field_Public_EnumPublicSealedvaDoMeReAdReSlAd13SlUnique_0 = EnumPublicSealedvaDoMeReAdReSlAd13SlUnique.DoNotCache,
                    field_Public_EnumPublicSealedvaOtAlMa4vUnique_0 = EnumPublicSealedvaOtAlMa4vUnique.Others
                }, default);
            }
        }
    }
}