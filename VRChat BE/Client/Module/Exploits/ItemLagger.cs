using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC.SDKBase;

namespace DeepClient.Client.Module.Exploits
{
    internal class ItemLagger
    {
        public static float elapsedTime = 0.0f;
        public static float lagInterval = 0.1f;
        public static bool IsEnabled = false;
        public static List<VRC_Pickup> pickups = new List<VRC_Pickup>();
        public static void State(bool s)
        {
            if (s)
            {
                pickups = GameObject.FindObjectsOfType<VRC_Pickup>().ToList();
                ToggleColliders(true);
                IsEnabled = true;
            }
            else
            {
                ToggleColliders(false);
                IsEnabled = false;
                pickups.Clear();
            }
        }
        public static void OnUpdate()
        {
            if (IsEnabled)
            {
                elapsedTime += Time.deltaTime;

                if (elapsedTime <= lagInterval)
                {
                    MovePickups(new Vector3(0, 3.402823E+37f, 2));
                }
                else if (elapsedTime <= lagInterval * 2.0f)
                {
                    MovePickups(Networking.LocalPlayer.gameObject.transform.forward * 2.0f);
                }
                else
                {
                    elapsedTime = 0.0f;
                }
            }
        }
        public static void ToggleColliders(bool isEnabled)
        {
            if (pickups == null || pickups.Count == 0 || !IsEnabled) return;

            foreach (var pickup in pickups)
            {
                if (pickup == null)
                {
                    pickups.Clear();
                    return;
                }

                var collider = pickup?.GetComponent<Collider>();
                if (collider != null)
                {
                    collider.enabled = isEnabled;
                }
            }
        }
        public static void MovePickups(Vector3 offset)
        {
            if (pickups == null || pickups.Count == 0 || !IsEnabled) return;

            var localPlayerPosition = Networking.LocalPlayer.gameObject.transform.position;
            var targetPosition = localPlayerPosition + offset;

            foreach (var pickup in pickups)
            {
                if (pickup == null)
                {
                    pickups.Clear();
                    return;
                }

                Networking.LocalPlayer.TakeOwnership(pickup.gameObject);
                pickup.transform.position = targetPosition;
            }
        }
    }
}